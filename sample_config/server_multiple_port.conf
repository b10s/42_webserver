# --- SERVER 1: port 8080 ---
server {
    listen 0.0.0.0:8080;
    # Server Name (used here as an identifier; Virtual Hosts are not implemented)
    server_name primary_service;

    # If content exceeds this limit, the server should respond with 413 (Content Too Large) 
    client_max_body_size 1048576; # 1MB

    # Set up default error pages
    error_page 404 /errors/404_port8080.html;
    error_page 413 /errors/413_large_body.html; # 413 (Content Too Large)

    # LOCATION 1: Root Directory & General Access
    location / {
        # Directory where the requested file should be located (Document Root)
        root /var/www/html/site_8080/data; 
        
        # Default file to serve when the requested resource is a directory
        index welcome.html index.html;
        
        # The server must support at least GET, POST, and DELETE
        allow_methods GET POST; 

        # Disable directory listing for security
        autoindex off;
    }

    # /LOCATION 2: File Upload Route
    location /upload {
        root /var/www/html/site_8080/data;
        allow_methods POST;
        
        # Uploading files is authorized, and storage location is provided 
        upload_enable on;
        upload_store /tmp/uploads_8080; 
    }
    
    # LOCATION 3: HTTP Redirection Example
    location /old {
        # 307 (Temporary Redirect) requires the user agent MUST NOT change the request method
        # I guess we don't need to implement 302 since 307 is more strict 
        return 307 http://localhost:8080/new_path/index.html; 
    }
}

# --- SERVER 2: Secondary Service Server (Port 80) ---
server {
    listen 0.0.0.0:80;
    server_name secondary_service;

    client_max_body_size 10240; # 10KB

    error_page 404 /errors/404_port80.html; 
    
    location / {
        root /var/www/html/site_80/static;
        index homepage.html;
        
        allow_methods DELETE; 
        
        # Enabling directory listing
        autoindex on;
    }

    # /cgi location: CGI Execution
    location /cgi {
        # CGI should be run in the correct directory for relative path file access 
        root /var/www/html/site_80/scripts;
        cgi_extension .py; # Python CGI
        cgi_executor /usr/bin/python3; 
        allow_methods GET POST;

        # Note on Chunked Requests: 
        # For chunked requests, the server needs to un-chunk them, as the CGI will expect EOF as the end of the body.
        # The message body length in a chunked transfer coding is determined by reading and decoding the chunked data 
        # until the transfer coding indicates the data is complete (chunk-size of zero).
        # The same EOF principle applies to CGI output if no content_length is returned.
    }
}